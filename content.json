{"meta":{"title":"Jieny’s Blog","subtitle":null,"description":null,"author":"XYB jieny","url":"https://jieny.github.io"},"pages":[{"title":"categories","date":"2018-08-10T14:30:46.000Z","updated":"2018-08-10T14:31:02.978Z","comments":true,"path":"categories/index.html","permalink":"https://jieny.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-08-10T14:32:38.000Z","updated":"2018-08-10T14:34:11.134Z","comments":true,"path":"tags/index.html","permalink":"https://jieny.github.io/tags/index.html","excerpt":"","text":""},{"title":"xxx","date":"2018-08-10T14:59:51.000Z","updated":"2018-08-10T15:32:40.140Z","comments":true,"path":"xxx/index.html","permalink":"https://jieny.github.io/xxx/index.html","excerpt":"","text":"内容1111111111111111111111111111111111"}],"posts":[{"title":"什么是SPA（单页Web应用）","slug":"SPA","date":"2019-06-04T15:29:43.000Z","updated":"2019-06-04T15:36:27.134Z","comments":true,"path":"2019/06/04/SPA/","link":"","permalink":"https://jieny.github.io/2019/06/04/SPA/","excerpt":"","text":"什么是SPASPA = single page web application = 单页Web应用SPA是一种特殊的Web应用，是加载单个HTML页面并在用户与应用程序交互时动态更新该页面。它将所有的活动局限于一个HTML中，仅在该页面初始化时加载相应的HTML、JavaScript、CSS。一旦页面加载完成，不会因为用户的操作而进行页面的重新加载（整页刷新）或跳转，而是利用JavaScript动态的变换HTML，从而实现UI与用户的交互。 传统Webgraph LR A[Client]-->|URL Request| B[Server] B-->|HTML Response| A 单页面应用graph LR A[Client]-->|AJAX Request| B[Server] B-->|Data Response| A 优点 有良好的交互体验能提升页面切换体验，用户在访问应用页面是不会频繁的去切换浏览页面，从而避免了页面的重新加载 前后端分离开发单页Web应用可以和RESTful规约一起使用，通过API提供接口数据，并使用Ajax异步获取，这样有助于分离客户端和服务器端工作 减轻服务器压力服务器只用出数据就可以，不用管展示逻辑和页面合成，吞吐能力会提高几倍 共用一套后端程序代码不用修改后端程序代码就可以同时用于 Web 界面、手机、平板等多种客户端 缺点 SEO难度较高由于所有的内容都在一个页面中动态替换显示，所以在SEO上其有着天然的弱势，所以如果你的站点对SEO很看重，且要用单页应用，那么就做些静态页面给搜索引擎用吧 初次加载耗时多为实现单页Web应用功能及显示效果，需要在加载页面的时候将JavaScript、CSS统一加载，部分页面可以在需要的时候加载。所以必须对JavaScript及CSS代码进行合并压缩处理 前进、后退管理由于单页Web应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理，当然此问题也有解决方案，如react-router 浅谈前端SPA（单页面应用）","categories":[],"tags":[]},{"title":"让hexo博客支持流程图","slug":"hexo-blog-add-diagrams","date":"2019-05-31T12:10:13.000Z","updated":"2019-06-04T15:36:21.868Z","comments":true,"path":"2019/05/31/hexo-blog-add-diagrams/","link":"","permalink":"https://jieny.github.io/2019/05/31/hexo-blog-add-diagrams/","excerpt":"","text":"使用方法见github，下面是部分翻译https://github.com/webappdevelp/hexo-filter-mermaid-diagrams mermaid，有道云笔记用的就是这个语法 假设我的博客的根目录为【blog】12$ cd blog$ yarn add hexo-filter-mermaid-diagrams 或者 npm install -s hexo-filter-mermaid-diagrams 打开blog/_config.yml文件，在底部插入以下代码123456# mermaid chartmermaid: ## mermaid url https://github.com/knsv/mermaid enable: true # default true version: \"7.1.2\" # default v7.1.2 options: # find more api options from https://github.com/knsv/mermaid/blob/master/src/mermaidAPI.js #startOnload: true // default true 如果你要使用’Class diagram’,还要设置external_link: false，默认是true 打开blog/themes/【主题文件夹】/layout/_partial/after-footer.ejs文件，在底部插入以下代码12345678&lt;% if (theme.mermaid.enable) &#123; %&gt; &lt;script src='https://unpkg.com/mermaid@&lt;%= theme.mermaid.version %&gt;/dist/mermaid.min.js'&gt;&lt;/script&gt; &lt;script&gt; if (window.mermaid) &#123; mermaid.initialize(&#123;theme: 'forest'&#125;); &#125; &lt;/script&gt;&lt;% &#125; %&gt; 使用示例，要加mermaid三个反引号 mermaidgraph LRA[Client]–&gt;|URL Request| B[Server]B–&gt;|HTML Response| A三个反引号 如下图： graph LR A[Client]-->|URL Request| B[Server] B-->|HTML Response| A 其他方案https://github.com/bubkoo/hexo-filter-flowchart npm install –save hexo-filter-flowchart 三个反引号 flowst=&gt;start: Start|past:&gt;http://www.google.com[blank]e=&gt;end: End:&gt;http://www.google.comop1=&gt;operation: My Operation|pastop2=&gt;operation: Stuff|currentsub1=&gt;subroutine: My Subroutine|invalidcond=&gt;condition: Yesor No?|approved:&gt;http://www.google.comc2=&gt;condition: Good idea|rejectedio=&gt;inputoutput: catch something…|request st-&gt;op1(right)-&gt;condcond(yes, right)-&gt;c2cond(no)-&gt;sub1(left)-&gt;op1c2(yes)-&gt;io-&gt;ec2(no)-&gt;op2-&gt;e三个反引号 如下图： st=>start: Start|past:>http://www.google.com[blank] e=>end: End:>http://www.google.com op1=>operation: My Operation|past op2=>operation: Stuff|current sub1=>subroutine: My Subroutine|invalid cond=>condition: Yes or No?|approved:>http://www.google.com c2=>condition: Good idea|rejected io=>inputoutput: catch something...|request st->op1(right)->cond cond(yes, right)->c2 cond(no)->sub1(left)->op1 c2(yes)->io->e c2(no)->op2->e{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-0-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-0\", options);","categories":[],"tags":[]},{"title":"About Me","slug":"about-me","date":"2018-11-11T03:11:11.000Z","updated":"2019-06-04T15:46:17.145Z","comments":true,"path":"2018/11/11/about-me/","link":"","permalink":"https://jieny.github.io/2018/11/11/about-me/","excerpt":"","text":"Welcome to here雷迪森 and 简特门，大家好！我是jieny，杰尼龟 【O(∩_∩)O哈哈~】 Now let’s discuss the following questions. Where is here ?答：还用说，这当然是我的博客啦！在这里，我将分享一些东西（具体是什么呢？想到啥就写啥咯）。具体内容请关注发布的文章，主要还是一些与计算机相关的和日常生活杂谈，还有些学习笔记吧。 Who am I ?答：我是一个平凡到不能再平凡的Coder。爱生活，爱CS。如果你对我所发的文章有什么疑问或者有什么建议，可以给我留言，我有看到会第一时间回复。当然，如果你“喜欢”我，可以find me探讨人生，如果我有时间的话！ Disclaimer 本博客所有的原创内容都是个人观点，不保证绝对正确，欢迎大家批评并指正，同时我自己也会不断的改进和完善。 文章内容会不定时更新，请关注最新内容。 如果有内容侵犯到您的权益，请跟我联系，我会马上删除。 How to find me ? Mail: xuyibin@139.com WeChat: kakalotto QQ: 576420147 Github: https://github.com/jieny","categories":[],"tags":[]}]}